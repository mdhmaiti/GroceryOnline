// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

// apps 

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// i specifically added the isAdmin but the rest is copied from the docs , a user may have multiple orders
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  isAdmin       Boolean @default(false)
  sessions      Session[]
  Order         Order[]
  Product       Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// our model
// note the category slug is actually unique ; suppose oil : there must be different kind of oil listed in the oil category 
model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  title     String
  desc      String
  color     String
  img       String?
  slug      String    @unique
  products  Product[]
}

model Product {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  title      String
  desc       String
  img        String?
  price      Decimal
  isFeatured Boolean  @default(false)
  options    Json[]
  category   Category @relation(fields: [catSlug], references: [slug])
  catSlug    String
  user       User     @relation(fields: [userEmail], references: [email])
  userEmail  String

}

// the order will be linked to the user later after we create the auth for now just create a migration model,, each order hust have ther user
model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  price     Decimal
  products  Json[]
  status    String
  intent_id String?  @unique
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String
 
}
